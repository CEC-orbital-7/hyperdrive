name: Package and Release

on:
  push:
    branches:
      - main
      - 'preview/**'
    tags:
      - test*
      - v*

jobs:
  package:
    runs-on: ubuntu-20.04
    env:
      TERM: xterm
    strategy:
      matrix:
        arch:
          - x64
          - arm64
        node-version:
          - '14'
        platform:
          - linux
          - macos
          - win
    steps:
      # Install deps and cache
      # Eventually it would be great if these steps could live in a separate YAML file
      # that could be included in line to avoid code duplication
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Use Yarn cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies
        run: yarn install --prefer-offline --frozen-lockfile

      # Package and upload the cli
      # @NOTE: We cross-compile on Linux because _right now_ this seems to be
      # the only place we can reliably build all the variants. We use actions/upload
      # so move assets between jobs
      - name: Package ${{ matrix.platform }} CLI
        if: ${{ matrix.arch == 'x64' }}
        run: |
          node ./scripts/dev-version.js
          node ./bin/hyperdrive version
          yarn pkg --config package.json --target=node${{ matrix.node-version }}-${{ matrix.platform }}-${{ matrix.arch }} bin/hyperdrive
          if test -f "dist/@lando/hyperdrive.exe"; then
            mv dist/@lando/hyperdrive.exe dist/@lando/hyperdrive-${{ matrix.platform }}-${{ matrix.arch }}.exe
          else
            mv dist/@lando/hyperdrive dist/@lando/hyperdrive-${{ matrix.platform }}-${{ matrix.arch }}
          fi

      # @NOTE: We cannot cross-compile arm64 builds on x64 runners so we run through docker for now
      # @TODO: switch this to use arm64 runners whenever those are available
      - name: Package ${{ matrix.platform }} CLI
        uses: uraimo/run-on-arch-action@v2.0.5
        if: ${{ matrix.arch == 'arm64' }}
        with:
          arch: aarch64
          # @TODO: eventually we need to get this to work on ubuntu20.04 for build parity but we are using
          # 18.04 because it was easier to get working, apparently there is a bug in 20.04s gpg?
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          env: |
            BUILD_PLATFORM: ${{ matrix.platform }}
            BUILD_ARCH: ${{ matrix.arch }}
          # We need to install node and yarn "again" because they dont exist inside our build container
          install: |
            apt update && apt -y install curl
            curl -fsSL https://deb.nodesource.com/setup_${{ matrix.node-version }}.x | bash -
            apt-get install -y nodejs
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
            apt update && apt -y install yarn
          run: |
            yarn pkg --config package.json --target=node${{ matrix.node-version }}-${{ matrix.platform }}-${{ matrix.arch }} bin/hyperdrive
            if test -f "dist/@lando/hyperdrive.exe"; then
              mv dist/@lando/hyperdrive.exe dist/@lando/hyperdrive-${{ matrix.platform }}-${{ matrix.arch }}.exe
            else
              mv dist/@lando/hyperdrive dist/@lando/hyperdrive-${{ matrix.platform }}-${{ matrix.arch }}
            fi

      - name: Upload hyperdrive-build-${{ github.sha }}
        uses: actions/upload-artifact@v2
        with:
          name: hyperdrive-build-${{ github.sha }}
          path: dist/@lando/*
          if-no-files-found: error
          retention-days: 1

  ship:
    runs-on: ${{ matrix.os }}
    needs:
      - package
    env:
      TERM: xterm
    strategy:
      matrix:
        os:
          - macos-10.15
          - ubuntu-20.04
          - windows-2019

    steps:
      # Set things up for signing, notarizing, uploading etc
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set other variables
        id: vars
        shell: bash
        run: |
          # Set generic source ref vars
          echo "::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}"
          echo "::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}"
          echo "::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}"
          # Unset vars if it makes sense to do so
          if [ "$GITHUB_REF" == "${GITHUB_REF#refs/tags/}" ]; then echo "::set-output name=SOURCE_TAG::"; fi
          if [ "$GITHUB_REF" == "${GITHUB_REF#refs/heads/}" ]; then echo "::set-output name=SOURCE_BRANCH::"; fi
      - name: Download hyperdrive-build-${{ github.sha }}
        uses: actions/download-artifact@v2
        with:
          path: dist/@lando

      # Codesign and create macOS binaries
      # TODO: We also should add notarization logic here?
      - name: Codesign and create macOS binaries
        env:
          APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_TEAM_ID: FY8GAUX282
        if: ${{ runner.os == 'macOS' }}
        run: |
          # Sign the binaries
          ./scripts/sign-macos.sh ./dist/@lando/hyperdrive-macos-x64
          ./scripts/sign-macos.sh ./dist/@lando/hyperdrive-macos-arm64
          # Generate release names

      # Codesign and create WiNdOzE binaries
      - name: Codesign and create Windoze binaries
        env:
          WINDOZE_CERT_DATA: ${{ secrets.WINDOZE_CERT_DATA }}
          WINDOZE_CERT_PASSWORD: ${{ secrets.WINDOZE_CERT_PASSWORD }}
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run:
          ./scripts/sign-win.ps1 ./dist/@lando/hyperdrive-win-x64.exe
          ./scripts/sign-win.ps1 ./dist/@lando/hyperdrive-win-arm64.exe

      # Create linux binaries
      - name: Create
        env:
        if: ${{ runner.os == 'Linux' }}
        run: |
          ls -lsa

      # Depending on the type of commit eg tagged, etc create the releases we need
      - name: Create releases
        env:
          SOURCE_BRANCH: ${{ steps.vars.outputs.SOURCE_BRANCH }}
          SOURCE_TAG: ${{ steps.vars.outputs.SOURCE_TAG }}
          PKG_PREFIX: "hyperdrive-${{ steps.vars.outputs.OS }}-${{ matrix.arch }}"
          PKG_SUFFIX: ${{ steps.vars.outputs.PKG_ENDING }}
        shell: bash
        run: |
          # Create release directories
          mkdir -p ./releases ./dev-builds

          # Snapshot release
          cp -f ./dist/@lando/${{ steps.pkg.outputs.SOURCE_PKG }} "./dev-builds/$PKG_PREFIX-build-${{ github.sha }}$PKG_SUFFIX"

          # Branch releases
          if [ -z "$SOURCE_TAG" ]; then cp -f ./dist/@lando/${{ steps.pkg.outputs.SOURCE_PKG }} "./releases/$PKG_PREFIX-$SOURCE_BRANCH-latest$PKG_SUFFIX"; fi
          # Latest dev release
          if [[ "$SOURCE_BRANCH" == "main" ]]; then cp -f ./dist/@lando/${{ steps.pkg.outputs.SOURCE_PKG }} "./releases/$PKG_PREFIX-latest$PKG_SUFFIX"; fi
          # Tag releases
          if [ ! -z "$SOURCE_TAG" ]; then cp -f ./dist/@lando/${{ steps.pkg.outputs.SOURCE_PKG }} "./releases/$PKG_PREFIX-$SOURCE_TAG$PKG_SUFFIX"; fi
          # Latest stable release
          if [ ! -z "$SOURCE_TAG" ]; then cp -f ./dist/@lando/${{ steps.pkg.outputs.SOURCE_PKG }} "./releases/$PKG_PREFIX-stable$PKG_SUFFIX"; fi

          # Print what we end up with
          ls -lsa ./releases
          ls -lsa ./dev-builds

      # Replace previously posted unsigned raw artifacts with signed build snapshots
      - name: Remove unsigned artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: hyperdrive-build-${{ github.sha }}
      - name: Upload build snapshot as Actions artifact
        uses: actions/upload-artifact@v2
        with:
          name: lando-${{ steps.vars.outputs.OS }}-${{ matrix.arch }}-${{ github.sha }}${{ steps.vars.outputs.PKG_ENDING }}
          path: dev-builds/
          if-no-files-found: error
          retention-days: 30
      # Upload releases to S3
      - name: Configure S3 Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Upload releases to S3
        shell: bash
        run: |
          aws s3 sync ./releases s3://files.lando.dev/hyperdrive --acl public-read
      # Upload releases to GitHub Releases
      - name: Upload releases to GitHub Releases
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: ./releases/hyperdrive-${{ steps.vars.outputs.OS }}-${{ matrix.arch }}-${{ steps.vars.outputs.SOURCE_TAG }}${{ steps.vars.outputs.PKG_ENDING }}
          # @TODO: Handle autochangelog stuff here eventaully
          # body_path: ${{ github.workflow }}-CHANGELOG.txt
